// src/App.jsx - VERSION AVEC TWITCH INT√âGR√â
import React, { useState, useEffect } from 'react';
import './App.css';
import './styles/twitch.css'; // ‚≠ê AJOUTER L'IMPORT CSS TWITCH
import NewsGame from './components/NewsGame';
import TwitchAuthHandler from './components/TwitchAuthHandler'; // ‚≠ê AJOUTER LE HANDLER
import { apiManager } from './services/apiManager';
import { twitchService } from './services/twitchService'; // ‚≠ê AJOUTER LE SERVICE

function App() {
  const [isLoading, setIsLoading] = useState(true);
  const [apiStatus, setApiStatus] = useState({});
  
  // ‚≠ê √âTATS TWITCH
  const [twitchStatus, setTwitchStatus] = useState({
    isAuthenticated: false,
    isConnected: false,
    username: null,
    isConnecting: false
  });

  useEffect(() => {
    // Test des APIs au d√©marrage
    const initAPIs = async () => {
      try {
        const status = await apiManager.testAPIs();
        setApiStatus(status);
        console.log('üìä Status des APIs:', status);
      } catch (error) {
        console.error('‚ùå Erreur lors du test des APIs:', error);
      } finally {
        setIsLoading(false);
      }
    };

    initAPIs();

    // ‚≠ê INITIALISER TWITCH
    initTwitch();
  }, []);

  // ‚≠ê FONCTION D'INITIALISATION TWITCH
  const initTwitch = () => {
    // V√©rifier si on a d√©j√† un token
    const savedToken = localStorage.getItem('twitch_access_token');
    const savedUsername = localStorage.getItem('twitch_username');

    if (savedToken && savedUsername) {
      setTwitchStatus(prev => ({
        ...prev,
        isAuthenticated: true,
        username: savedUsername
      }));
    }

    // ‚≠ê √âCOUTER LES √âV√âNEMENTS TWITCH
    window.addEventListener('twitch-auth-success', (event) => {
      console.log('‚úÖ Authentification Twitch r√©ussie:', event.detail);
      setTwitchStatus(prev => ({
        ...prev,
        isAuthenticated: true,
        username: event.detail.username
      }));
    });

    // Callback pour changement de connexion
    twitchService.setOnConnectionChange((connected) => {
      setTwitchStatus(prev => ({
        ...prev,
        isConnected: connected,
        isConnecting: false
      }));
    });
  };

  // ‚≠ê GESTION DE L'AUTHENTIFICATION TWITCH
  const handleTwitchAuth = async () => {
    try {
      setTwitchStatus(prev => ({ ...prev, isConnecting: true }));
      await twitchService.authenticate();
      
      // L'√©tat sera mis √† jour via l'√©v√©nement window
    } catch (error) {
      console.error('‚ùå Erreur auth Twitch:', error);
      setTwitchStatus(prev => ({ ...prev, isConnecting: false }));
    }
  };

  // ‚≠ê CONNEXION AU CHAT
  const handleTwitchConnect = async () => {
    try {
      setTwitchStatus(prev => ({ ...prev, isConnecting: true }));
      await twitchService.connectToChat();
    } catch (error) {
      console.error('‚ùå Erreur connexion chat:', error);
      setTwitchStatus(prev => ({ ...prev, isConnecting: false }));
    }
  };

  // ‚≠ê D√âCONNEXION
  const handleTwitchDisconnect = () => {
    twitchService.disconnect();
    localStorage.removeItem('twitch_access_token');
    localStorage.removeItem('twitch_username');
    localStorage.removeItem('twitch_user_id');
    localStorage.removeItem('twitch_display_name');
    
    setTwitchStatus({
      isAuthenticated: false,
      isConnected: false,
      username: null,
      isConnecting: false
    });
  };

  if (isLoading) {
    return (
        <div className="app">
          <div className="container">
            <div className="loading-screen">
              <div className="spinner"></div>
              <h2>üéÆ CAPSULE NEWS üì∞</h2>
              <p>Initialisation des APIs et traduction...</p>
            </div>
          </div>
        </div>
    );
  }

  return (
      <div className="app">
        {/* ‚≠ê HANDLER D'AUTHENTIFICATION TWITCH */}
        <TwitchAuthHandler />
        
        <div className="container">
          <header className="header">
            <h1 className="logo">CAPSULE NEWS</h1>
            <p className="subtitle">Quiz d'actualit√©s insolites interactif</p>
            <p className="description">Vraies actualit√©s bizarres vs Fausses news d√©lirantes ‚Ä¢ Vrai ou Faux ?</p>

            {/* ‚≠ê STATUS CONTAINER AVEC APIS ET TWITCH */}
            <div className="status-container">
              {/* Indicateur de statut des APIs */}
              <div className="api-status">
                <span className={`status-dot ${apiStatus.guardianAPI ? 'online' : 'offline'}`}></span>
                <span className={`status-dot ${apiStatus.gnewsAPI ? 'online' : 'offline'}`}></span>
                <span className={`status-dot ${apiStatus.currentsAPI ? 'online' : 'offline'}`}></span>
                <span className={`status-dot ${apiStatus.translation ? 'online' : 'offline'}`}></span>
                <small>Articles Complets + Traduction üá´üá∑</small>
              </div>

              {/* ‚≠ê STATUS TWITCH EN HAUT √Ä DROITE */}
              <div className="twitch-header-status">
                <div className="twitch-status-mini">
                  <span className="twitch-icon">üì∫</span>
                  <div className="twitch-info">
                    {!twitchStatus.isAuthenticated ? (
                      <button 
                        className="btn-twitch-mini auth" 
                        onClick={handleTwitchAuth}
                        disabled={twitchStatus.isConnecting}
                      >
                        {twitchStatus.isConnecting ? '‚è≥' : 'üîê'} Se connecter √† Twitch
                      </button>
                    ) : !twitchStatus.isConnected ? (
                      <div className="twitch-authenticated">
                        <span className="twitch-user">üëã {twitchStatus.username}</span>
                        <button 
                          className="btn-twitch-mini connect" 
                          onClick={handleTwitchConnect}
                          disabled={twitchStatus.isConnecting}
                        >
                          {twitchStatus.isConnecting ? '‚è≥' : 'üí¨'} Rejoindre le chat
                        </button>
                      </div>
                    ) : (
                      <div className="twitch-connected">
                        <span className="twitch-user">üéÆ {twitchStatus.username}</span>
                        <span className="twitch-status-text">Chat connect√© ‚úÖ</span>
                        <button 
                          className="btn-twitch-mini disconnect" 
                          onClick={handleTwitchDisconnect}
                        >
                          üîå D√©connecter
                        </button>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </div>
          </header>

          <NewsGame apiStatus={apiStatus} />
        </div>
      </div>
  );
}

export default App;
